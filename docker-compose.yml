version: '3.8'

services:
  # Base de données principale PostgreSQL (multi-tenant)
  postgres:
    image: postgres:14-alpine
    container_name: planner-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-planner}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-plannerpassword}
      POSTGRES_DB: ${POSTGRES_DB:-plannersuite}
      PGDATA: /data/postgres
    volumes:
      - postgres-data:/data/postgres
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U planner -d plannersuite"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - planner-network

  # Redis pour caching et sessions
  redis:
    image: redis:7-alpine
    container_name: planner-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispassword}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - planner-network

  # Service API (backend)
  api:
    build:
      context: .
      dockerfile: ./docker/api/Dockerfile
      target: development
    container_name: planner-api
    restart: unless-stopped
    volumes:
      - ./packages:/app/packages
      - ./apps/api:/app/apps/api
      - node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER:-planner}:${POSTGRES_PASSWORD:-plannerpassword}@postgres:5432/${POSTGRES_DB:-plannersuite}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispassword}@redis:6379
      - JWT_SECRET=${JWT_SECRET:-dev_jwt_secret}
      - PORT=3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - planner-network
    command: yarn workspace api dev

  # Service Web (frontend)
  web:
    build:
      context: .
      dockerfile: ./docker/web/Dockerfile
      target: development
    container_name: planner-web
    restart: unless-stopped
    volumes:
      - ./packages:/app/packages
      - ./apps/web:/app/apps/web
      - node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - planner-network
    command: yarn workspace web dev

  # PgAdmin pour gestion de la base de données (développement)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: planner-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@planner.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-pgadminpassword}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - planner-network

networks:
  planner-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  pgadmin-data:
  node_modules:
